// File generated by FlutterFire CLI.
// ignore_for_file: lines_longer_than_80_chars, avoid_classes_with_only_static_members

// Secret variables
import "secrets.dart" as globals;

import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for macos - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static const FirebaseOptions web = FirebaseOptions(
      apiKey: globals.webApi,
      appId: globals.webAppId,
      messagingSenderId: globals.messagingSenderId,
      projectId: globals.projectId,
      authDomain: globals.authDomain,
      storageBucket: globals.storageBucket,
      measurementId: globals.measurementid);

  static const FirebaseOptions android = FirebaseOptions(
      apiKey: globals.androidApi,
      appId: globals.androidAppId,
      messagingSenderId: globals.messagingSenderId,
      projectId: globals.projectId,
      storageBucket: globals.storageBucket);

  static const FirebaseOptions ios = FirebaseOptions(
      apiKey: globals.iosApi,
      appId: globals.androidAppId,
      messagingSenderId: globals.messagingSenderId,
      projectId: globals.projectId,
      storageBucket: globals.storageBucket,
      iosClientId: globals.iosClientId,
      iosBundleId: globals.iosBundleId);
}
